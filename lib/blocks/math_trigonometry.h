#ifndef MATH_TRIGONOMETRY_H
#define MATH_TRIGONOMETRY_H

#include "data_types.h"

constexpr int16_t sine_quarter_wave[256] = {
    0x0000, 0x00C9, 0x0193, 0x025D, 0x0327, 0x03F1, 0x04BA, 0x0584, 0x064E, 0x0717,
    0x07E1, 0x08AA, 0x0973, 0x0A3D, 0x0B06, 0x0BCF, 0x0C98, 0x0D61, 0x0E29, 0x0EF2,
    0x0FBA, 0x1082, 0x114A, 0x1212, 0x12DA, 0x13A2, 0x1469, 0x1530, 0x15F7, 0x16BE,
    0x1784, 0x184B, 0x1911, 0x19D7, 0x1A9C, 0x1B61, 0x1C26, 0x1CEB, 0x1DB0, 0x1E74,
    0x1F38, 0x1FFB, 0x20BF, 0x2182, 0x2244, 0x2307, 0x23C9, 0x248A, 0x254B, 0x260C,
    0x26CD, 0x278D, 0x284D, 0x290C, 0x29CB, 0x2A8A, 0x2B48, 0x2C06, 0x2CC3, 0x2D80,
    0x2E3C, 0x2EF8, 0x2FB4, 0x306F, 0x3129, 0x31E4, 0x329D, 0x3356, 0x340F, 0x34C7,
    0x357F, 0x3636, 0x36EC, 0x37A3, 0x3858, 0x390D, 0x39C1, 0x3A75, 0x3B29, 0x3BDB,
    0x3C8D, 0x3D3F, 0x3DF0, 0x3EA0, 0x3F50, 0x3FFF, 0x40AD, 0x415B, 0x4209, 0x42B5,
    0x4361, 0x440C, 0x44B7, 0x4561, 0x460A, 0x46B3, 0x475B, 0x4802, 0x48A8, 0x494E,
    0x49F3, 0x4A98, 0x4B3B, 0x4BDE, 0x4C81, 0x4D22, 0x4DC3, 0x4E63, 0x4F02, 0x4FA0,
    0x503E, 0x50DB, 0x5177, 0x5212, 0x52AD, 0x5346, 0x53DF, 0x5477, 0x550E, 0x55A5,
    0x563A, 0x56CF, 0x5763, 0x57F6, 0x5888, 0x591A, 0x59AA, 0x5A3A, 0x5AC9, 0x5B56,
    0x5BE3, 0x5C6F, 0x5CFB, 0x5D85, 0x5E0E, 0x5E97, 0x5F1E, 0x5FA5, 0x602A, 0x60AF,
    0x6133, 0x61B6, 0x6238, 0x62B9, 0x6339, 0x63B8, 0x6436, 0x64B3, 0x652F, 0x65AA,
    0x6624, 0x669D, 0x6715, 0x678D, 0x6803, 0x6878, 0x68EC, 0x695F, 0x69D1, 0x6A42,
    0x6AB2, 0x6B21, 0x6B8F, 0x6BFC, 0x6C68, 0x6CD3, 0x6D3C, 0x6DA5, 0x6E0D, 0x6E73,
    0x6ED9, 0x6F3D, 0x6FA0, 0x7002, 0x7064, 0x70C4, 0x7123, 0x7180, 0x71DD, 0x7239,
    0x7293, 0x72ED, 0x7345, 0x739C, 0x73F2, 0x7447, 0x749B, 0x74EE, 0x753F, 0x7590,
    0x75DF, 0x762D, 0x767A, 0x76C6, 0x7710, 0x775A, 0x77A2, 0x77E9, 0x782F, 0x7874,
    0x78B8, 0x78FA, 0x793C, 0x797C, 0x79BB, 0x79F9, 0x7A35, 0x7A71, 0x7AAB, 0x7AE4,
    0x7B1C, 0x7B52, 0x7B88, 0x7BBC, 0x7BEF, 0x7C21, 0x7C51, 0x7C81, 0x7CAF, 0x7CDC,
    0x7D08, 0x7D32, 0x7D5C, 0x7D84, 0x7DAB, 0x7DD1, 0x7DF5, 0x7E18, 0x7E3A, 0x7E5B,
    0x7E7B, 0x7E99, 0x7EB6, 0x7ED2, 0x7EED, 0x7F06, 0x7F1E, 0x7F35, 0x7F4B, 0x7F5F,
    0x7F73, 0x7F85, 0x7F95, 0x7FA5, 0x7FB3, 0x7FC0, 0x7FCC, 0x7FD7, 0x7FE0, 0x7FE8,
    0x7FEF, 0x7FF5, 0x7FF9, 0x7FFC, 0x7FFE, 0x7FFF};

/**
 * @brief Get the sine and cosine values for a given normalized angle
 * @param angle The input angle in uint32_t format, normalized to [0, 2*PI] represented as
 * [0, UINT32_MAX]
 * @return VectorAxes2D_I16 Structure containing sine and cosine values
 */
constexpr static VectorAxes2D_I16 getSinCos(int32_t angle) {

  uint32_t angle_uint = uint32_t(angle) >> 22;
  // Map the normalized angle to the index of the quarter wave array
  uint8_t index = angle_uint % 256;  // Take the top 8 bits for the index (0 to 255)

  // Determine the quadrant (top 2 bits of the angle)
  int8_t quadrant = angle >> 30;

  // Retrieve values from the sine quarter wave array
  int16_t a = sine_quarter_wave[index];
  int16_t b = sine_quarter_wave[255 - index];

  // Determine sine and cosine based on the quadrant
  switch (quadrant) {
    case 0:  // 0 to PI/2
      return { .sin = static_cast<int16_t>(a), .cos = static_cast<int16_t>(b) };
    case 1:  // PI/2 to PI
      return { .sin = static_cast<int16_t>(b), .cos = static_cast<int16_t>(-a) };
    case -2:  // PI to 3*PI/2
      return { .sin = static_cast<int16_t>(-a), .cos = static_cast<int16_t>(-b) };
    case -1:  // 3*PI/2 to 2*PI
      return { .sin = static_cast<int16_t>(-b), .cos = static_cast<int16_t>(a) };
    default:
      // This case should never be reached, but return zeroes for safety
      return { .sin = 0, .cos = 0 };
  }
}

static VectorAxes2D_I16 rotateSinCosVector(const VectorAxes2D_I16& vector,
                                           const VectorAxes2D_I16& rotation) {
  // Compute the resultant sine and cosine value after rotation
  int32_t out_sin_raw = vector.sin * rotation.cos + vector.cos * rotation.sin;
  int32_t out_cos_raw = vector.cos * rotation.cos - vector.sin * rotation.sin;
  return {.sin = int16_t(out_sin_raw), .cos = int16_t(out_cos_raw)};
}

#endif  // MATH_TRIGONOMETRY_H